#!/usr/bin/env node
'use strict';

var START = process.hrtime();

require('coffee-script');
var path = require('path');
var fs = require('fs');
var  _ = require('lodash');


var projectConfig;
var projectConfigPath = path.resolve('.groc.json');
try {
  projectConfig = JSON.parse(fs.readFileSync(projectConfigPath));
} catch (e) {
  projectConfig = {};
}

var optimist = require('optimist')
  .usage(
    "Usage: grock [options]\n\n"+
    "You can also use a configuration file named .groc.json to specify "+
    "these options."
  )

  .boolean('help')
  .describe('help', 'Show this message')
  .alias('h', 'help')
  .alias('?', 'help')

  .boolean('version')
  .describe('version', 'Show grock version')

  .string('glob')
  .default('glob', projectConfig.glob || 'lib/*.coffee')
  .describe('glob', 'Set glob to match source files')

  .string('out')
  .default('out', projectConfig.out || 'docs/')
  .describe('out', 'Render documentation into here')

  .string('style')
  .default('style', projectConfig.style || 'solarized')
  .describe('style', 'Set the output style/theme')

  .boolean('verbose')
  .default('verbose', projectConfig.verbose || false)
  .alias('v', 'verbose')
  .describe('verbose', 'Show more log output')

  .string('index')
  .default('index', projectConfig.index || 'Readme.md')
  .describe('index', 'File to be used as index')
  .alias('i', 'index')

  .string('root')
  .default('root', projectConfig.root || '.')
  .describe('root', "The project's root directory")
  ;

if (optimist.argv.help) {
  optimist.showHelp();
  process.exit(2);
}

if (optimist.argv.version) {
  var pkg = JSON.parse(fs.readFileSync(__dirname+"/../package.json"));
  console.log("Version", pkg.version);
  process.exit(0);
}

var argv = _.defaults(optimist.argv, projectConfig);

var generator = require('../lib/generator');

argv.start = START;

generator(argv);
